/* This doesn't look like -*- C -*-, but it is!
 *
 * arm.def - ARM ISA machine definition
 *
 * This file is a part of the SimpleScalar tool suite written by
 * Todd M. Austin as a part of the Multiscalar Research Project.
 *
 * The tool suite is currently maintained by Doug Burger and Todd M. Austin.
 *
 * Copyright (C) 1997, 1998 by Todd M. Austin
 *
 * This source file is distributed "as is" in the hope that it will be
 * useful.  The tool set comes with no warranty, and no author or
 * distributor accepts any responsibility for the consequences of its
 * use.
 *
 * Everyone is granted permission to copy, modify and redistribute
 * this tool set under the following conditions:
 *
 *    This source code is distributed for non-commercial use only.
 *    Please contact the maintainer for restrictions applying to
 *    commercial use.
 *
 *    Permission is granted to anyone to make or distribute copies
 *    of this source code, either as received or modified, in any
 *    medium, provided that all copyright notices, permission and
 *    nonwarranty notices are preserved, and that the distributor
 *    grants the recipient permission for further redistribution as
 *    permitted by this document.
 *
 *    Permission is granted to distribute this file in compiled
 *    or executable form under the same conditions that apply for
 *    source code, provided that either:
 *
 *    A. it is accompanied by the corresponding machine-readable
 *       source code,
 *    B. it is accompanied by a written offer, with no time limit,
 *       to give anyone a machine-readable copy of the corresponding
 *       source code in return for reimbursement of the cost of
 *       distribution.  This written offer must permit verbatim
 *       duplication by anyone, or
 *    C. it is distributed by someone who received only the
 *       executable form, and is accompanied by a copy of the
 *       written offer of source code that they received concurrently.
 *
 * In other words, you are welcome to use, share and improve this
 * source file.  You are forbidden to forbid anyone else to use, share
 * and improve what you give them.
 *
 * INTERNET: dburger@cs.wisc.edu
 * US Mail:  1210 W. Dayton Street, Madison, WI 53706
 *
 * $Id: arm.def,v 1.1.1.1 2000/11/29 14:53:54 cu-cs Exp $
 * Revision 1.1.2.23  2000/08/25 18:40:13  taustin
 * Started implementing funky PC semantics for ARM.
 *
 * Revision 1.1.2.22  2000/08/23 22:06:53  chriswea
 * now supports all long multiples.. changed the decode order it now
 * sees them right after ALUREG0 branch
 *
 * Revision 1.1.2.21  2000/08/23 20:33:04  chriswea
 * fixed the umull bug (added a link from the add to umulladd)
 *
 * Revision 1.1.2.20  2000/08/23 15:24:56  chriswea
 * Fixed the carry out flag for arm
 *
 * Revision 1.1.2.19  2000/08/22 18:38:52  taustin
 * More progress on the SimpleScalar/ARM target.
 *
 * Revision 1.1.2.18  2000/07/28 21:37:22  taustin
 * More debugging of the SimpleScalar/ARM target.
 *
 * Revision 1.1.2.17  2000/07/28 20:32:04  omutlu
 * *** empty log message ***
 *
 * Revision 1.1.2.16  2000/07/28 04:53:43  omutlu
 * fixed the post indexed ldr/strs
 *
 * Revision 1.1.2.15  2000/07/27 21:56:11  omutlu
 * corrections to shifts
 *
 * Revision 1.1.2.14  2000/07/27 21:45:04  taustin
 * Added umpteen half word and signed byte loads.
 *
 * Revision 1.1.2.13  2000/07/27 20:15:32  omutlu
 * fixes to ldr and str
 *
 * Revision 1.1.2.12  2000/07/27 19:41:42  omutlu
 * fixed bugs in tst,teq,cmn
 *
 * Revision 1.1.2.10  2000/07/27 17:51:26  omutlu
 * fixed monadic CPDO instructions
 *
 * Revision 1.1.2.9  2000/07/26 12:21:55  taustin
 * Fixed CPRT_LINK in ARM decode table.
 *
 * Revision 1.1.2.8  2000/07/26 06:32:18  omutlu
 *
 * More fixes to floating-point instructions
 *
 * Revision 1.1.2.7  2000/07/26 05:01:50  taustin
 * More disassembler fixes...
 *
 * Revision 1.1.2.6  2000/07/25 18:29:03  omutlu
 * Modified the branch offset calculation, cmp, ldm
 *
 * Revision 1.1.2.5  2000/07/21 18:30:59  taustin
 * More progress on the SimpleScalar/ARM target.
 *
 * Revision 1.1.2.4  2000/07/13 03:09:55  taustin
 * More progress on the SimpleScalar/ARM target.
 *
 * Revision 1.1.2.3  2000/07/01 13:35:37  taustin
 * More progress on the ARM target support...
 *
 * Revision 1.1.2.2  2000/06/01 19:35:18  taustin
 * ARM definition file, work in progress...
 *
 * Revision 1.1.2.1  2000/05/31 19:25:59  taustin
 * ARM definition files
 *
 * Revision 1.1.1.1  2000/05/26 15:22:27  taustin
 * SimpleScalar Tool Set
 *
 *
 * Revision 1.5  1999/12/31 18:56:17  taustin
 * quad_t naming conflicts removed
 * Alpha instruction set extensions (MVI, BWX, AMASK, IMPLVER, etc...)
 * 21-bit conditional branch offset fix
 *
 * Revision 1.4  1999/12/13 18:59:20  taustin
 * debug printf's removed
 *
 * Revision 1.3  1999/03/08 06:39:41  taustin
 * added Alpha BWX ISA extensions (byte and word loads)
 *
 * Revision 1.2  1998/08/31 17:14:07  taustin
 * fixed MS VC++ shift-by-64bit problems in EXT* instructions
 * fixed MS VC++ qword to double problem in FPCR instruction
 *
 * Revision 1.1  1998/08/27 16:53:47  taustin
 * Initial revision
 *
 *
 */

/* FIXME: these comments are out-of-date */

/* This file defines all aspects of the SimpleScalar instruction set
 * architecture.  Each instruction set in the architecture has a DEFINST()
 * macro call included below.  The contents of a instruction definition are
 * as follows:
 *
 *   DEFINST(<enum>,			<opcode>,
 *	     <opname>,			<operands>,
 *	     <fu_req>,			<iflags>,
 *	     <output deps...>,		<input deps...>,
 *	     <expr>)
 *
 * Where:
 *
 *   <enum>	- is an enumerator that is returned when an instruction is
 *		  decoded by SS_OP_ENUM()
 *   <opcode>	- is the opcode of this instruction
 *   <opname>   - name of this instruction as a string, used by disassembler
 *   <operands>	- specified the instruction operand fields and their printed
 * 		  order for disassembly, used by disassembler, the recognized
 *		  operand field are (the instruction format is detailed in
 *		  the header file ss.h):
 *		    J - target field
 *		    j - PC relative target (offset + PC)
 *		    s - S register field
 *		    b - S register field (base register)
 *		    t - T register field
 *		    d - D register field
 *		    S - S register field (FP register)
 *		    T - T register field (FP register)
 *		    D - D register field (FP register)
 *		    o - load address offset (offset)
 *		    i - signed immediate field value
 *		    u - unsigned immediate field value
 *		    U - upper immediate field value
 *		    H - shift amount immediate field value
 *		    B - break code
 *
 *   <fu_req>	- functional unit requirements for this instruction
 *   <iflags>	- instruction flags, accessible via the SS_OP_FLAGS()
 *		  macro, flags are defined with F_* prefix in ss.h
 *   <output deps...>
 *		- a list of up to two output dependency designators, the
 *		  following designators are recognized (place an DNA in any
 *		  unused fields:
 *		    DGPR(N)   - general purpose register N
 *		    DGPR_D(N) - double word general purpose register N
 *		    DCGPR(N)  - general purpose register conditional on
 *			        pre/post- increment/decrement mode
 *		    DFPR_L(N) - floating-point register N, as word
 *		    DFPR_F(N) - floating-point reg N, as single-prec float
 *		    DFPR_D(N) - floating-point reg N, as double-prec double
 *		    DHI	      - HI result register
 *		    DLO	      - LO result register
 *		    DFCC      - floating point condition codes
 *		    DCPC      - current PC
 *		    DNPC      - next PC
 *		    DNA	      - no dependence
 *
 *   <input deps...>
 *		- a list of up to three input dependency designators, the
 *		  designators are defined above (place an DNA in any unused
 *		  fields.
 *
 *   <expr>	- a C expression that implements the instruction being
 * 		  defined, the expression must modify all architected state
 *		  affected by the instruction's execution, by default, the
 *		  next PC (NPC) value defaults to the current PC (CPC) plus
 *		  SS_INST_SIZE, as a result, only taken branches need to set
 *		  NPC
 *
 *		  The following predefined macros are available for use in
 *		  DEFINST() instruction expressions to access the value of
 *		  instruction operand/opcode field values:
 *
 *		    RS	    - RS register field value
 *		    RT	    - RT register field value
 *		    RD	    - RD register field value
 *		    FS	    - RS register field value
 *		    FT	    - RT register field value
 *		    FD	    - RD register field value
 *		    BS	    - RS register field value
 *		    TARG    - jump target field value
 *		    OFS	    - signed offset field value
 *		    IMM	    - signed offset field value
 *		    UIMM    - unsigned offset field value
 *		    SHAMT   - shift amount field value
 *		    BCODE   - break code field value
 *
 *		  To facilitate the construction of performance simulators
 *		  (which may want to specialize their architected state
 *		  storage format), all architected register and memory state
 *		  is accessed through the following macros:
 *
 *		    GPR(N)         - read general purpose register N
 *		    SET_GPR(N,E)   - write general purpose register N with E
 *		    GPR_D(N)       - read double word general purpose reg N
 *		    SET_GPR_D(N,E) - write double word gen purpose reg N w/ E
 *		    FPR_L(N)       - read floating-point register N, as word
 *		    SET_FPR_L(N,E) - floating-point reg N, as word, with E
 *		    FPR_F(N)       - read FP reg N, as single-prec float
 *		    SET_FPR_F(N,E) - write FP reg N, as single-prec float w/ E
 *		    FPR_D(N)       - read FP reg N, as double-prec double
 *		    SET_FPR_D(N,E) - write FP reg N, as double-prec double w/E
 *		    HI	           - read HI result register
 *		    SET_HI(E)      - write HI result register with E
 *		    LO	           - read LO result register
 *		    SET_LO(E)      - write LO result register with E
 *		    FCC	           - read floating point condition codes
 *		    SET_FCC(E)     - write floating point condition codes w/ E
 *		    CPC	           - read current PC register
 *		    NPC	           - read next PC register
 *		    SET_NPC(E)     - write next PC register with E
 *		    TPC	           - read target PC register
 *		    SET_TPC(E)     - write target PC register with E
 *
 *		    READ_SIGNED_BYTE(A)   - read signed byte from address A
 *		    READ_UNSIGNED_BYTE(A) - read unsigned byte from address A
 *		    READ_SIGNED_HALF(A)   - read signed half from address A
 *		    READ_UNSIGNED_HALF(A) - read unsigned half from address A
 *		    READ_WORD(A)          - read word from address A
 *		    WRITE_BYTE(E,A)       - write byte value E to address A
 *		    WRITE_HALF(E,A)       - write half value E to address A
 *		    WRITE_WORD(E,A)       - write word value E to address A
 *
 *		  Finally, the following helper functions are available to
 *		  assist in the construction of instruction expressions:
 *
 *		    INC_DEC(E,N,S) - execute E and update N as per pre/post-
 *				     incr/decr addressing sementics for an
 *				     access of S bytes
 *		    OVER(X,Y)      - check for overflow for X+Y, both signed
 *		    UNDER(X,Y)	   - check for umderflow for X-Y, both signed
 *		    DIV0(N)	   - check for divide by zero, N is denom
 *		    INTALIGN(N)    - check double word int reg N alignment
 *		    FPALIGN(N)	   - check double word FP reg N alignment
 *		    TALIGN(T)	   - check jump target T alignment
 */

#if 0
/* TOP LEVEL decode table */
DEFLINK(TOPLEV, 0x00, "toplev", 24, 0x0f)
CONNECT(TOPLEV)
#endif

/* most simulators ignore the UOP definitions */
#ifndef DEFUOP
#define DEFUOP(OP, NAME, OPFORM, RES, FLAGS, O1, O2, O3, I1, I2, I3, I4)
#endif /* !DEFUOP */

/* funky PC semantics macros */
#define GPR_SH(N) (((N) != 15) ? GPR(N) : (GPR(15) + (SHIFT_REG ? 12 : 8)))
#define GPR_EX(N) (((N) != 15) ? GPR(N) : (GPR(15) + 8))
#define GPR_MEM(N) (((N) != 15) ? GPR(N) : (GPR(15) + 12))
#define GPR_BASE(N) (((N) != 15)                                         \
						 ? (((N) == (RN) && !_first) ? _wbaddr : GPR(N)) \
						 : (GPR(15) + 12))
#define GPR_RES(N) (((N) == (RD)) ? _result : GPR(N))

/* dependence helper macros */
#define DCOND (((COND) == COND_AL) ? DNA : DPSR)
#define DCONDSH (((COND) == COND_AL)                      \
					 ? (((SHIFT_BITS) == 0) ? DNA : DPSR) \
					 : DPSR)
#define DSHRS(RS) (((SHIFT_BITS) == 0) ? DNA : DGPR(RS))

DEFLINK(ALUREG0_LINK, 0x00, "alureg0_link", 4, 0x0f)

DEFLINK(ALUREG1_LINK, 0x01, "alureg1_link", 4, 0x0f)

DEFLINK(ALUIMM0_LINK, 0x02, "aluimm0_link", 20, 0x0f)

DEFLINK(ALUIMM1_LINK, 0x03, "aluimm1_link", 20, 0x0f)

DEFLINK(MEMIMMPOST_LINK, 0x04, "memimmpost_link", 20, 0x0f)

DEFLINK(MEMIMMPRE_LINK, 0x05, "memimmpre_link", 20, 0x0f)

DEFLINK(MEMREGPOST_LINK, 0x06, "memregpost_link", 20, 0x0f)

DEFLINK(MEMREGPRE_LINK, 0x07, "memregpre_link", 20, 0x0f)

DEFLINK(BLKPOST_LINK, 0x08, "blkpost_link", 20, 0x0f)

DEFLINK(BLKPRE_LINK, 0x09, "blkpre_link", 20, 0x0f)

DEFLINK(BR_LINK, 0x0a, "br_link", 28, 0x0f)

DEFINST(BRL, 0x0b,
		"bl%c", "%j",
		IntALU, F_CALL /*F_CTRL | F_DIRJMP*/,
		DGPR(14), DNA, DNA, DCOND, DNA, DNA, DNA)

DEFLINK(CDXPOST_LINK, 0x0c, "cdxpost_link", 8, 0x0f)

DEFLINK(CDXPRE_LINK, 0x0d, "cdxpre_link", 8, 0x0f)

DEFLINK(CPROC_LINK, 0x0e, "cproc_link", 8, 0x0f)

DEFINST(SWI, 0x0f,
		"swi%c", "%S",
		NA, F_TRAP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(ALUREG0_LINK)

DEFLINK(ALUREG0a_LINK, 0x0f00, "alureg0a_link", 20, 0x0f)

/* FIXME: 0x00 is SWP */
DEFLINK(MUL_LINK, 0x09, "mul_link", 20, 0x0f)

DEFLINK(LDRHSTRH_LINK, 0x0b, "ldrhstrh_link", 20, 0x0f)

DEFLINK(LDRSBSTRSB_LINK, 0x0d, "ldrsbstrsb_link", 20, 0x0f)

DEFLINK(LDRSHSTRSH_LINK, 0x0f, "ldrshstrsh_link", 20, 0x0f)

CONNECT(ALUREG1_LINK)

DEFLINK(ALUREG1a_LINK, 0x0f00, "alureg1a_link", 20, 0x0f)

DEFLINK(BX_LINK, 0x01, "bx_link", 20, 0x0f)

/* FIXME: 0x00 is SWP */

DEFLINK(LDRH_PSTRH_P_LINK, 0x0b, "ldrh_pstrh_p_link", 20, 0x0f)

DEFLINK(LDRSB_PSTRSB_P_LINK, 0x0d, "ldrsb_pstrsb_p_link", 20, 0x0f)

DEFLINK(LDRSH_PSTRSH_P_LINK, 0x0f, "ldrsh_pstrsh_p_link", 20, 0x0f)

CONNECT(ALUREG0a_LINK)

DEFINST(AND, 0x00,
		"and%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ANDS, 0x01,
		"and%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(EOR, 0x02,
		"eor%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(EORS, 0x03,
		"eor%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(SUB, 0x04,
		"sub%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(SUBS, 0x05,
		"sub%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(RSB, 0x06,
		"rsb%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(RSBS, 0x07,
		"rsb%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ADD, 0x08,
		"add%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ADDS, 0x09,
		"adds%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ADC, 0x0a,
		"adc%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ADCS, 0x0b,
		"adc%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(SBC, 0x0c,
		"sbc%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(SBCS, 0x0d,
		"sbc%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(RSC, 0x0e,
		"rsc%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(RSCS, 0x0f,
		"rsc%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

CONNECT(ALUREG1a_LINK)

DEFLINK(SWPMRS_LINK, 0x00, "swpmrs_link", 4, 0xff)

DEFINST(TSTS, 0x01,
		"tst%cs", "%n,%m",
		IntALU, F_ICOMP,
		DPSR, DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFLINK(MSRTEQ_LINK, 0x02, "msrteq_link", 12, 0x7f)

DEFINST(TEQS, 0x03,
		"teq%cs", "%n,%m",
		IntALU, F_ICOMP,
		DPSR, DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFLINK(MRSSWP_LINK, 0x04, "mrsswp_link", 4, 0xff)

DEFINST(CMPS, 0x05,
		"cmp%c", "%n,%m",
		IntALU, F_ICOMP,
		DPSR, DPSR, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFLINK(MSRTST_LINK, 0x06, "msrtst_link", 12, 0x7f)

DEFINST(CMNS, 0x07,
		"cmn%c", "%n,%m",
		IntALU, F_ICOMP,
		DPSR, DPSR, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ORR, 0x08,
		"orr%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(ORRS, 0x09,
		"orr%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(MOV, 0x0a,
		"mov%c", "%d,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RM), DSHRS(RS), DNA)

DEFINST(MOVS, 0x0b,
		"mov%cs", "%d,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RM), DSHRS(RS), DNA)

DEFINST(BIC, 0x0c,
		"bic%c", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(BICS, 0x0d,
		"bic%cs", "%d,%n,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DGPR(RM), DSHRS(RS))

DEFINST(MVN, 0x0e,
		"mvn%c", "%d,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCONDSH, DGPR(RM), DSHRS(RS), DNA)

DEFINST(MVNS, 0x0f,
		"mvn%cs", "%d,%m",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RM), DSHRS(RS), DNA)

CONNECT(SWPMRS_LINK)

#if 0
DEFLINK(MRSTST_LINK, 0xff00, "mrstst_link", 0, 0xf0fff)

CONNECT(MRSTST_LINK)

DEFINST(MSR_CPSR,		EQ, 0xf0000,
	"msr",			"%d, cpsr",
	IntALU,			F_ICOMP,
	DGPR(RD), DNA, DNA,	DCOND, DPSR, DNA, DNA)
#endif

DEFINST(TST, 0xff00,
		"tst%c", "%n,%m",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(SWP, 0x09,
		"swp%c", "%d,%w,%s,%n",
		IntMULT, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(MSRTEQ_LINK)

DEFINST(TEQ, 0x7f00,
		"teq%c", "%n,%m",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(MSR_CPSR, 0x0f,
		"msr", "cpsr,%d",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(MRSSWP_LINK)

#if 0
DEFLINK(MRSCMP_LINK, NE, 0x09, "mrscmp_link", 0, 0xf0fff)

CONNECT(MRSCMP_LINK)

DEFINST(MSR_SPSR,		EQ, 0xf0000,
	"mrs",			"%d, spsr",
	IntALU,			F_ICOMP,
	DGPR(RD), DNA, DNA,	DCOND, DPSR, DNA, DNA, DNA)
#endif

DEFINST(CMP, 0xff00,
		"cmp%c", "%n,%m",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(SWP1, 0x09,
		"swp%c", "%d,%w,%s,%n",
		IntMULT, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(MSRTST_LINK)

DEFINST(TST1, 0x7f00,
		"tst%c", "%n,%m",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(MSR_SPSR, 0x0f,
		"msr", "spsr,%d",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(ALUIMM0_LINK)

DEFINST(ANDI, 0x00,
		"and%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(ANDSI, 0x01,
		"and%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(EORI, 0x02,
		"eor%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(EORSI, 0x03,
		"eor%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(SUBI, 0x04,
		"sub%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(SUBSI, 0x05,
		"sub%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(RSBI, 0x06,
		"rsb%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(RSBSI, 0x07,
		"rsb%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(ADDI, 0x08,
		"add%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(ADDSI, 0x09,
		"add%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(ADCI, 0x0a,
		"adc%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DPSR, DGPR(RN), DNA, DNA)

DEFINST(ADCSI, 0x0b,
		"adc%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DNA, DNA)

DEFINST(SBCI, 0x0c,
		"sbc%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DPSR, DGPR(RN), DNA, DNA)

DEFINST(SBCSI, 0x0d,
		"sbc%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DNA, DNA)

DEFINST(RSCI, 0x0e,
		"rsc%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DPSR, DGPR(RN), DNA, DNA)

DEFINST(RSCSI, 0x0f,
		"rsc%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DPSR, DGPR(RN), DNA, DNA)

CONNECT(ALUIMM1_LINK)

DEFINST(TSTI, 0x00,
		"tst%c", "%n,#%i",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(TSTSI, 0x01,
		"tst%cs", "%n,#%i",
		IntALU, F_ICOMP,
		DPSR, DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFLINK(MSRITEQI_LINK, 0x02, "msriteqi_link", 12, 0x7f)

DEFINST(TEQSI, 0x03,
		"teq%cs", "%n,#%i",
		IntALU, F_ICOMP,
		DPSR, DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(CMPI, 0x04,
		"cmp%c", "%n,#%i",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(CMPSI, 0x05,
		"cmp%c", "%n,#%i",
		IntALU, F_ICOMP,
		DPSR, DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFLINK(MSRITSTI_LINK, 0x06, "msritsti_link", 12, 0x7f)

DEFINST(CMNSI, 0x07,
		"cmn%c", "%n,#%i",
		IntALU, F_ICOMP,
		DPSR, DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(ORRI, 0x08,
		"orr%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(ORRSI, 0x09,
		"orr%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(MOVI, 0x0a,
		"mov%c", "%d,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(MOVSI, 0x0b,
		"mov%cs", "%d,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DNA, DNA, DNA)

DEFINST(BICI, 0x0c,
		"bic%c", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(BICSI, 0x0d,
		"bic%cs", "%d,%n,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DGPR(RN), DNA, DNA)

DEFINST(MVNI, 0x0e,
		"mvn%c", "%d,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(MVNSI, 0x0f,
		"mvn%cs", "%d,#%i",
		IntALU, F_ICOMP,
		DGPR(RD), DPSR, DNA, DCOND, DNA, DNA, DNA)

CONNECT(MSRITEQI_LINK)

DEFINST(TEQI, 0x7f00,
		"teq%c", "%n,#%i",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(MRSI_CPSR, 0x0f,
		"mrs", "cpsr,%d",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(MSRITSTI_LINK)

DEFINST(TSTI1, 0x7f00,
		"tst%c", "%n,#%i",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(MRSI_SPSR, 0x0f,
		"mrs", "spsr,%d",
		IntALU, F_ICOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(BX_LINK)

DEFINST(BX, 0x02,
		"bx%c", "%j",
		IntALU, F_CTRL | F_UNCOND | F_INDIRJMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

/* ALL OF THE MULL INSTRUCTIONS */
CONNECT(MUL_LINK)

DEFINST(MUL, 0x00,
		"mul%c", "%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RN), DNA, DNA, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(MULS, 0x01,
		"mul%cs", "%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RN), DPSR, DNA, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(MLA, 0x02,
		"mla%c", "%n,%w,%s,%d",
		IntMULT, F_ICOMP,
		DGPR(RN), DNA, DNA, DCOND, DGPR(RM), DGPR(RS), DGPR(RD))

DEFINST(MLAS, 0x03,
		"mla%cs", "%n,%w,%s,%d",
		IntMULT, F_ICOMP,
		DGPR(RN), DPSR, DNA, DCOND, DGPR(RM), DGPR(RS), DGPR(RD))

DEFINST(UMULL, 0x08,
		"umull%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DNA, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(UMULLS, 0x09,
		"umulls%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DPSR, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(UMLAL, 0x0a,
		"umlal%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DNA, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(UMLALS, 0x0b,
		"umlals%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DPSR, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(SMULL, 0x0c,
		"smull%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DNA, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(SMULLS, 0x0d,
		"smulls%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DPSR, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(SMLAL, 0x0e,
		"smlal%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DNA, DCOND, DGPR(RM), DGPR(RS), DNA)

DEFINST(SMLALS, 0x0f,
		"smlals%c", "%d,%n,%w,%s",
		IntMULT, F_ICOMP,
		DGPR(RD), DGPR(RN), DPSR, DCOND, DGPR(RM), DGPR(RS), DNA)

CONNECT(LDRHSTRH_LINK)

DEFINST(STRH_R, 0x00,
		"str%ch", "%d,[%n],-%w",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(LDRH_RL, 0x01,
		"ldr%ch", "%d,[%n],-%w",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x02: STRH_RW is invalid, W is implied... */

/* FIXME: 0x03: LDRH_RWL is invalid, W is implied... */

DEFINST(STRH_O, 0x04,
		"str%ch", "%d,[%n],-#%h",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDRH_OL, 0x05,
		"ldr%ch", "%d,[%n],-#%h",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x06: STRH_OW is invalid, W is implied... */

/* FIXME: 0x07: LDRH_OWL is invalid, W is implied... */

DEFINST(STRH_RU, 0x08,
		"str%ch", "%d,[%n],%w",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(LDRH_RUL, 0x09,
		"ldr%ch", "%d,[%n],%w",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0a: STRH_RUW is invalid, W is implied... */

/* FIXME: 0x0b: LDRH_RUWL is invalid, W is implied... */

DEFINST(STRH_OU, 0x0c,
		"str%ch", "%d,[%n],#%h",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDRH_OUL, 0x0d,
		"ldr%ch", "%d,[%n],#%h",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0e: STRH_OUW is invalid, W is implied... */

/* FIXME: 0x0f: LDRH_OUWL is invalid, W is implied... */

CONNECT(LDRSBSTRSB_LINK)

/* FIXME: 0x00: STRSB_R is invalid... */

DEFINST(LDRSB_RL, 0x01,
		"ldr%csb", "%d,[%n],-%w",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x02: STRSB_RW is invalid, W is implied... */

/* FIXME: 0x03: LDRSB_RWL is invalid, W is implied... */

/* FIXME: 0x04: STRSB_O is invalid... */

DEFINST(LDRSB_OL, 0x05,
		"ldr%csb", "%d,[%n],-#%h",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x06: STRSB_OW is invalid, W is implied... */

/* FIXME: 0x07: LDRSB_OWL is invalid, W is implied... */

/* FIXME: 0x08: STRSB_RU is invalid... */

DEFINST(LDRSB_RUL, 0x09,
		"ldr%csb", "%d,[%n],%w",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0a: STRSB_RUW is invalid, W is implied... */

/* FIXME: 0x0b: LDRSB_RUWL is invalid, W is implied... */

/* FIXME: 0x0c: STRSB_OU is invalid... */

DEFINST(LDRSB_OUL, 0x0d,
		"ldr%csb", "%d,[%n],#%h",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0e: STRSB_OUW is invalid, W is implied... */

/* FIXME: 0x0f: LDRSB_OUWL is invalid, W is implied... */

CONNECT(LDRSHSTRSH_LINK)

/* FIXME: 0x00: STRSH_R is invalid... */

DEFINST(LDRSH_RL, 0x01,
		"ldr%csh", "%d,[%n],-%w",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x02: STRSH_RW is invalid, W is implied... */

/* FIXME: 0x03: LDRSH_RWL is invalid, W is implied... */

/* FIXME: 0x04: STRSH_O is invalid... */

DEFINST(LDRSH_OL, 0x05,
		"ldr%csh", "%d,[%n],-#%h",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x06: STRSH_OW is invalid, W is implied... */

/* FIXME: 0x07: LDRSH_OWL is invalid, W is implied... */

/* FIXME: 0x08: STRSH_RU is invalid... */

DEFINST(LDRSH_RUL, 0x09,
		"ldr%csh", "%d,[%n],%w",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0a: STRSH_RUW is invalid, W is implied... */

/* FIXME: 0x0b: LDRSH_RUWL is invalid, W is implied... */

/* FIXME: 0x0c: STRSH_OU is invalid... */

DEFINST(LDRSH_OUL, 0x0d,
		"ldr%csh", "%d,[%n],#%h",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0e: STRSH_OUW is invalid, W is implied... */

/* FIXME: 0x0f: LDRSH_OUWL is invalid, W is implied... */

CONNECT(LDRH_PSTRH_P_LINK)

DEFINST(STRH_PR, 0x00,
		"str%ch", "%d,[%n,%w]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(LDRH_PRL, 0x01,
		"ldr%ch", "%d,[%n,%w]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(STRH_PRW, 0x02,
		"str%ch", "%d,[%n,%w]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(LDRH_PRWL, 0x03,
		"ldr%ch", "%d,[%n,%w]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(STRH_PO, 0x04,
		"str%ch", "%d,[%n,-#%h]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDRH_POL, 0x05,
		"ldr%ch", "%d,[%n,-#%h]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STRH_POW, 0x06,
		"str%ch", "%d,[%n,-#%h]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDRH_POWL, 0x07,
		"ldr%ch", "%d,[%n,-#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STRH_PRU, 0x08,
		"str%ch", "%d,[%n,%w]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(LDRH_PRUL, 0x09,
		"ldr%ch", "%d,[%n,%w]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(STRH_PRUW, 0x0a,
		"str%ch", "%d,[%n,%w]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(LDRH_PRUWL, 0x0b,
		"ldr%ch", "%d,[%n,%w]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

DEFINST(STRH_POU, 0x0c,
		"str%ch", "%d,[%n,#%h]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDRH_POUL, 0x0d,
		"ldr%ch", "%d,[%n,#%h]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STRH_POUW, 0x0e,
		"str%ch", "%d,[%n,#%h]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDRH_POUWL, 0x0f,
		"ldr%ch", "%d,[%n,#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDRSB_PSTRSB_P_LINK)

/* FIXME: 0x00: STRSB_PR is invalid... */

DEFINST(LDRSB_PRL, 0x01,
		"ldr%csb", "%d,[%n,-%w]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x02: STRSB_PRW is invalid, W is implied... */

DEFINST(LDRSB_PRWL, 0x03,
		"ldr%csb", "%d,[%n,-%w]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x04: STRSB_PO is invalid... */

DEFINST(LDRSB_POL, 0x05,
		"ldr%csb", "%d,[%n,-#%h]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x06: STRSB_POW is invalid, W is implied... */

DEFINST(LDRSB_POWL, 0x07,
		"ldr%csb", "%d,[%n,-#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x08: STRSB_PRU is invalid... */

DEFINST(LDRSB_PRUL, 0x09,
		"ldr%csb", "%d,[%n,%w]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0a: STRSB_PRUW is invalid, W is implied... */

DEFINST(LDRSB_PRUWL, 0x0b,
		"ldr%csb", "%d,[%n,%w]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0c: STRSB_POU is invalid... */

DEFINST(LDRSB_POUL, 0x0d,
		"ldr%csb", "%d,[%n,#%h]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0e: STRSB_POUW is invalid, W is implied... */

DEFINST(LDRSB_POUWL, 0x0f,
		"ldr%csb", "%d,[%n,#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDRSH_PSTRSH_P_LINK)

/* FIXME: 0x00: STRSH_PR is invalid... */

DEFINST(LDRSH_PRL, 0x01,
		"ldr%csh", "%d,[%n,-%w]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x02: STRSH_PRW is invalid, W is implied... */

DEFINST(LDRSH_PRWL, 0x03,
		"ldr%csh", "%d,[%n,-%w]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x04: STRSH_PO is invalid... */

DEFINST(LDRSH_POL, 0x05,
		"ldr%csh", "%d,[%n,-#%h]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x06: STRSH_POW is invalid, W is implied... */

DEFINST(LDRSH_POWL, 0x07,
		"ldr%csh", "%d,[%n,-#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x08: STRSH_PRU is invalid... */

DEFINST(LDRSH_PRUL, 0x09,
		"ldr%csh", "%d,[%n,%w]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0a: STRSH_PRUW is invalid, W is implied... */

DEFINST(LDRSH_PRUWL, 0x0b,
		"ldr%csh", "%d,[%n,%w]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DGPR(RM))

/* FIXME: 0x0c: STRSH_POU is invalid... */

DEFINST(LDRSH_POUL, 0x0d,
		"ldr%csh", "%d,[%n,#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0e: STRSH_POUW is invalid, W is implied... */

DEFINST(LDRSH_POUWL, 0x0f,
		"ldr%csh", "%d,[%n,#%h]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(MEMIMMPOST_LINK)

DEFINST(STR, 0x00,
		"str%c", "%d,[%n],-#%o",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_L, 0x01,
		"ldr%c", "%d,[%n],-#%o",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x02: STR_W non-privileged... */

/* FIXME: 0x03: LDR_WL non-privileged... */

DEFINST(STR_B, 0x04,
		"str%cb", "%d,[%n],-#%o",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_BL, 0x05,
		"ldr%cb", "%d,[%n],-#%o",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x06: STR_BW non-privileged... */

/* FIXME: 0x07: LDR_BWL non-privileged... */

DEFINST(STR_U, 0x08,
		"str%c", "%d,[%n],#%o",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_UL, 0x09,
		"ldr%c", "%d,[%n],#%o",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0a: STR_UW non-privileged... */

/* FIXME: 0x0b: LDR_UWL non-privileged... */

DEFINST(STR_UB, 0x0c,
		"str%cb", "%d,[%n],#%o",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_UBL, 0x0d,
		"ldr%cb", "%d,[%n],#%o",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

/* FIXME: 0x0e: STR_UBW non-privileged... */

/* FIXME: 0x0f: LDR_UBWL non-privileged... */

CONNECT(MEMIMMPRE_LINK)

DEFINST(STR_P, 0x00,
		"str%c", "%d,[%n,-#%o]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PL, 0x01,
		"ldr%c", "%d,[%n,-#%o]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PW, 0x02,
		"str%c", "%d,[%n,-#%o]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PWL, 0x03,
		"ldr%c", "%d,[%n,-#%o]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PB, 0x04,
		"str%cb", "%d,[%n,-#%o]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PBL, 0x05,
		"ldr%cb", "%d,[%n,-#%o]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PBW, 0x06,
		"str%cb", "%d,[%n,-#%o]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PBWL, 0x07,
		"ldr%cb", "%d,[%n,-#%o]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PU, 0x08,
		"str%c", "%d,[%n,#%o]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PUL, 0x09,
		"ldr%c", "%d,[%n,#%o]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PUW, 0x0a,
		"str%c", "%d,[%n,#%o]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PUWL, 0x0b,
		"ldr%c", "%d,[%n,#%o]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PUB, 0x0c,
		"str%cb", "%d,[%n,#%o]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PUBL, 0x0d,
		"ldr%cb", "%d,[%n,#%o]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(STR_PUBW, 0x0e,
		"str%cb", "%d,[%n,#%o]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDR_PUBWL, 0x0f,
		"ldr%cb", "%d,[%n,#%o]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(MEMREGPOST_LINK)

DEFINST(STR_R, 0x00,
		"str%c", "%d,[%n],-%m!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RL, 0x01,
		"ldr%c", "%d,[%n],-%m!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

/* FIXME: STR_RW, 0x02, special priv semantics */

/* FIXME: LDR_RWL, 0x03, special priv semantics */

DEFINST(STR_RB, 0x04,
		"str%cb", "%d,[%n],-%m!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RBL, 0x05,
		"ldr%cb", "%d,[%n],-%m!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

/* FIXME: STR_RBW, 0x06, special priv semantics */

/* FIXME: LDR_RBWL, 0x07, special priv semantics */

DEFINST(STR_RU, 0x08,
		"str%c", "%d,[%n],%m!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RUL, 0x09,
		"ldr%c", "%d,[%n],%m!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

/* FIXME: STR_RUW, 0x0a, special priv semantics */

/* FIXME: LDR_RUWL, 0x0b, special priv semantics */

DEFINST(STR_RUB, 0x0c,
		"str%cb", "%d,[%n],%m!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RUBL, 0x0d,
		"ldr%cb", "%d,[%n],%m!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

/* FIXME: STR_RUBW, 0x0e, special priv semantics */

/* FIXME: LDR_RUBWL, 0x0f, special priv semantics */

CONNECT(MEMREGPRE_LINK)

DEFINST(STR_RP, 0x00,
		"str%c", "%d,[%n, -%m]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPL, 0x01,
		"ldr%c", "%d,[%n, -%m]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPW, 0x02,
		"str%c", "%d,[%n, -%m]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPWL, 0x03,
		"ldr%c", "%d,[%n, -%m]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPB, 0x04,
		"str%cb", "%d,[%n, -%m]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPBL, 0x05,
		"ldr%cb", "%d,[%n, -%m]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPBW, 0x06,
		"str%cb", "%d,[%n, -%m]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPBWL, 0x07,
		"ldr%cb", "%d,[%n, -%m]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPU, 0x08,
		"str%c", "%d,[%n, %m]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPUL, 0x09,
		"ldr%c", "%d,[%n, %m]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPUW, 0x0a,
		"str%c", "%d,[%n, %m]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPUWL, 0x0b,
		"ldr%c", "%d,[%n, %m]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPUB, 0x0c,
		"str%cb", "%d,[%n, %m]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPUBL, 0x0d,
		"ldr%cb", "%d,[%n, %m]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DNA, DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(STR_RPUBW, 0x0e,
		"str%cb", "%d,[%n, %m]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DGPR(RD), /**/ DCONDSH, DGPR(RN), DGPR(RM))

DEFINST(LDR_RPUBWL, 0x0f,
		"ldr%cb", "%d,[%n, %m]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DGPR(RD), DGPR(RN), DNA, DNA, /**/ DCONDSH, DGPR(RN), DGPR(RM))

CONNECT(BLKPOST_LINK)

DEFINST(STM, 0x00,
		"stm%c%a", "%n,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_L, 0x01,
		"ldm%c%a", "%n,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)


DEFINST(STM_W, 0x02,
		"stm%c%a", "%n!,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_WL, 0x03,
		"ldm%c%a", "%n!,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

#if 0

/* STM_S, 0x04, TODO... */

DEFINST(STM_S,			0x04,
	"stm%c%a",		"%n,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/* LDM_SL, 0x05, TODO... */

DEFINST(LDM_SL,			0x05,
	"stm%c%a",		"%n,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/* STM_SW, 0x06, TODO... */

DEFINST(STM_SW,			0x06,
	"stm%c%a",		"%n!,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/* LDM_SWL, 0x07, TODO... */

DEFINST(LDM_SWL,			0x07,
	"stm%c%a",		"%n!,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)
#endif

DEFINST(STM_U, 0x08,
		"stm%c%a", "%n,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_UL, 0x09,
		"ldm%c%a", "%n,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)


DEFINST(STM_UW, 0x0a,
		"stm%c%a", "%n!,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_UWL, 0x0b,
		"ldm%c%a", "%n!,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

#if 0

/* STM_US, 0x0c, TODO... */

DEFINST(STM_US,			0x0c,
	"stm%c%a",		"%n,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/* LDM_USL, 0x0d, TODO... */

DEFINST(LDM_USL,			0x0d,
	"stm%c%a",		"%n,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/* STM_USW, 0x0e, TODO... */

DEFINST(STM_USW,			0x0e,
	"stm%c%a",		"%n,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)

/* LDM_USWL, 0x0f, TODO... */

DEFINST(LDM_USWL,			0x0f,
	"stm%c%a",		"%n,%R",
	WrPort,			F_MEM|F_STORE|F_DISP/*|F_CISC*/,
	DNA, DNA, DNA,		DNA, DNA, DNA, DNA)
#endif

CONNECT(BLKPRE_LINK)

DEFINST(STM_P, 0x00,
		"stm%c%a", "%n,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_PL, 0x01,
		"ldm%c%a", "%n,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)


DEFINST(STM_PW, 0x02,
		"stm%c%a", "%n!,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_PWL, 0x03,
		"ldm%c%a", "%n!,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

/* STM_PS, 0x04, TODO... */

/* LDM_PSL, 0x05, TODO... */

/* STM_PSW, 0x06, TODO... */

/* LDM_PSWL, 0x07, TODO... */

DEFINST(STM_PU, 0x08,
		"stm%c%a", "%n,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_PUL, 0x09,
		"ldm%c%a", "%n,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)


DEFINST(STM_PUW, 0x0a,
		"stm%c%a", "%n!,%R",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

DEFINST(LDM_PUWL, 0x0b,
		"ldm%c%a", "%n!,%R",
		RdPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DNA, DNA, DNA, DNA)

CONNECT(BR_LINK)

DEFINST(BRGE, 0x0a,
		"bge%c", "%j",
		IntALU, F_COND,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(BRLT, 0x0b,
		"blt%c", "%j",
		IntALU, F_COND,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(BRGT, 0x0c,
		"bgt%c", "%j",
		IntALU, F_COND,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(BRLE, 0x0d,
		"ble%c", "%j",
		IntALU, F_COND,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(BR, 0x0e,
		"b%c", "%j",
		IntALU, F_UNCOND /*F_CTRL | F_DIRJMP*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

/* STM_PUS, 0x0c, TODO... */

/* LDM_PUSL, 0x0d, TODO... */

/* STM_PUSW, 0x0e, TODO... */

/* LDM_PUSWL, 0x0f, TODO... */

CONNECT(CPROC_LINK)

DEFLINK(FPA_LINK, 0x01, "fpa_link", 4, 0x01)

CONNECT(FPA_LINK)

DEFLINK(CPDO_LINK, 0x00, "cpdo_link", 20, 0x0f)

DEFLINK(CPRTCMF_LINK, 0x01, "cprtcmf_link", 12, 0x0f)

CONNECT(CPRTCMF_LINK)

DEFLINK(CPRT_CDP_LINK, 0x0e00, "cprt_cdp_link", 4, 0x01)

DEFLINK(CMF_LINK, 0x0f, "cmf_link", 21, 0x07)

/* FP coprocessor data operations (CPDO) */

CONNECT(CPDO_LINK)

DEFLINK(ADFMVF_LINK, 0x00, "adfmvf_link", 15, 0x01)

DEFLINK(MUFMNF_LINK, 0x01, "mufmnf_link", 15, 0x01)

DEFLINK(SUFABS_LINK, 0x02, "sufabs_link", 15, 0x01)

DEFLINK(RSFRND_LINK, 0x03, "rsfrnd_link", 15, 0x01)

DEFLINK(DVFSQT_LINK, 0x04, "dvfsqt_link", 15, 0x01)

DEFLINK(RDFLOG_LINK, 0x05, "rdflog_link", 15, 0x01)

DEFLINK(POWLGN_LINK, 0x06, "powlgn_link", 15, 0x01)

DEFLINK(RPWEXP_LINK, 0x07, "rpwexp_link", 15, 0x01)

DEFLINK(RMFSIN_LINK, 0x08, "rmfsin_link", 15, 0x01)

DEFLINK(FMLCOS_LINK, 0x09, "fmlcos_link", 15, 0x01)

DEFLINK(FDVTAN_LINK, 0x0a, "fdvtan_link", 15, 0x01)

DEFLINK(FRDASN_LINK, 0x0b, "frdasn_link", 15, 0x01)

DEFLINK(POLACS_LINK, 0x0c, "polacs_link", 15, 0x01)

DEFLINK(UNDATN_LINK, 0x0d, "undatn_link", 15, 0x01)

DEFLINK(UNDURD_LINK, 0x0e, "undurd_link", 15, 0x01)

DEFLINK(UNDNRM_LINK, 0x0f, "undnrm_link", 15, 0x01)

CONNECT(ADFMVF_LINK)

DEFLINK(ADFADFI_LINK, 0x00, "adfadfi_link", 3, 0x01)

DEFLINK(MVFMVFI_LINK, 0x01, "mvfmvfi_link", 3, 0x01)

CONNECT(MUFMNF_LINK)

DEFLINK(MUFMUFI_LINK, 0x00, "mufmufi_link", 3, 0x01)

DEFLINK(MNFMNFI_LINK, 0x01, "mnfmnfi_link", 3, 0x01)

CONNECT(SUFABS_LINK)

DEFLINK(SUFSUFI_LINK, 0x00, "sufsufi_link", 3, 0x01)

DEFLINK(ABSABSI_LINK, 0x01, "absabsi_link", 3, 0x01)

CONNECT(RSFRND_LINK)

DEFLINK(RSFRSFI_LINK, 0x00, "rsfrsfi_link", 3, 0x01)

DEFLINK(RNDRNDI_LINK, 0x01, "rndrndi_link", 3, 0x01)

CONNECT(DVFSQT_LINK)

DEFLINK(DVFDVFI_LINK, 0x00, "dvfdvfi_link", 3, 0x01)

DEFLINK(SQTSQTI_LINK, 0x01, "sqtsqti_link", 3, 0x01)

CONNECT(RDFLOG_LINK)

DEFLINK(RDFRDFI_LINK, 0x00, "rdfrdfi_link", 3, 0x01)

DEFLINK(LOGLOGI_LINK, 0x01, "loglogi_link", 3, 0x01)

CONNECT(POWLGN_LINK)

DEFLINK(POWPOWI_LINK, 0x00, "powpowi_link", 3, 0x01)

DEFLINK(LGNLGNI_LINK, 0x01, "lgnlgni_link", 3, 0x01)

CONNECT(RPWEXP_LINK)

DEFLINK(RPWRPWI_LINK, 0x00, "rpwrpwi_link", 3, 0x01)

DEFLINK(EXPEXPI_LINK, 0x01, "expexpi_link", 3, 0x01)

CONNECT(RMFSIN_LINK)

DEFLINK(RMFRMFI_LINK, 0x00, "rmfrmfi_link", 3, 0x01)

DEFLINK(SINSINI_LINK, 0x01, "sinsini_link", 3, 0x01)

CONNECT(FMLCOS_LINK)

DEFLINK(FMLFMLI_LINK, 0x00, "fmlfmli_link", 3, 0x01)

DEFLINK(COSCOSI_LINK, 0x01, "coscosi_link", 3, 0x01)

CONNECT(FDVTAN_LINK)

DEFLINK(FDVFDVI_LINK, 0x00, "fdvfdvi_link", 3, 0x01)

DEFLINK(TANTANI_LINK, 0x01, "tantani_link", 3, 0x01)

CONNECT(FRDASN_LINK)

DEFLINK(FRDFRDI_LINK, 0x00, "frdfrdi_link", 3, 0x01)

DEFLINK(ASNASNI_LINK, 0x01, "asnasni_link", 3, 0x01)

CONNECT(POLACS_LINK)

DEFLINK(POLPOLI_LINK, 0x00, "polpoli_link", 3, 0x01)

DEFLINK(ACSACSI_LINK, 0x01, "acsacsi_link", 3, 0x01)

CONNECT(UNDATN_LINK)

DEFLINK(ATNATNI_LINK, 0x01, "atnatni_link", 3, 0x01)

CONNECT(UNDURD_LINK)

DEFLINK(URDURDI_LINK, 0x01, "urdurdi_link", 3, 0x01)

CONNECT(UNDNRM_LINK)

DEFLINK(NRMNRMI_LINK, 0x01, "nrmnrmi_link", 3, 0x01)

CONNECT(ADFADFI_LINK)

DEFINST(ADF, 0x00,
		"adf%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(ADFI, 0x01,
		"adf%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(MVFMVFI_LINK)

DEFINST(MVF, 0x00,
		"mvf%c%t%r", "%D,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(MVFI, 0x01,
		"mvf%c%t%r", "%D,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(MUFMUFI_LINK)

DEFINST(MUF, 0x00,
		"muf%c%t%r", "%D,%N,%M",
		FloatMULT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(MUFI, 0x01,
		"muf%c%t%r", "%D,%N,#%I",
		FloatMULT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(MNFMNFI_LINK)

DEFINST(MNF, 0x00,
		"mnf%c%t%r", "%D,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(MNFI, 0x01,
		"mnf%c%t%r", "%D,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(SUFSUFI_LINK)

DEFINST(SUF, 0x00,
		"suf%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(SUFI, 0x01,
		"suf%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(ABSABSI_LINK)

DEFINST(ABS, 0x00,
		"abs%c%t%r", "%D,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(ABSI, 0x01,
		"abs%c%t%r", "%D,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(RSFRSFI_LINK)

DEFINST(RSF, 0x00,
		"rsf%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(RSFI, 0x01,
		"rsf%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(RNDRNDI_LINK)

DEFINST(RND, 0x00,
		"rnd%c%t%r", "%D,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(RNDI, 0x01,
		"rnd%c%t%r", "%D,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(DVFDVFI_LINK)

DEFINST(DVF, 0x00,
		"dvf%c%t%r", "%D,%N,%M",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(DVFI, 0x01,
		"dvf%c%t%r", "%D,%N,#%I",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(SQTSQTI_LINK)

DEFINST(SQT, 0x00,
		"sqt%c%t%r", "%D,%M",
		FloatSQRT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(SQTI, 0x01,
		"sqt%c%t%r", "%D,#%I",
		FloatSQRT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(RDFRDFI_LINK)

DEFINST(RDF, 0x00,
		"rdf%c%t%r", "%D,%N,%M",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(RDFI, 0x01,
		"rdf%c%t%r", "%D,%N,#%I",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(LOGLOGI_LINK)

DEFINST(LOG, 0x00,
		"log%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(LOGI, 0x01,
		"log%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(POWPOWI_LINK)

DEFINST(POW, 0x00,
		"pow%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(POWI, 0x01,
		"pow%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(LGNLGNI_LINK)

DEFINST(LGN, 0x00,
		"lgn%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(LGNI, 0x01,
		"lgn%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(RPWRPWI_LINK)

DEFINST(RPW, 0x00,
		"rpw%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(RPWI, 0x01,
		"rpw%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(EXPEXPI_LINK)

DEFINST(EXP, 0x00,
		"exp%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(EXPI, 0x01,
		"exp%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(RMFRMFI_LINK)

DEFINST(RMF, 0x00,
		"rmf%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(RMFI, 0x01,
		"rmf%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(SINSINI_LINK)

DEFINST(SIN, 0x00,
		"sin%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(SINI, 0x01,
		"sin%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(FMLFMLI_LINK)

DEFINST(FML, 0x00,
		"fml%c%t%r", "%D,%N,%M",
		FloatMULT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(FMLI, 0x01,
		"fml%c%t%r", "%D,%N,#%I",
		FloatMULT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(COSCOSI_LINK)

DEFINST(COS, 0x00,
		"cos%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(COSI, 0x01,
		"cos%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(FDVFDVI_LINK)

DEFINST(FDV, 0x00,
		"fdv%c%t%r", "%D,%N,%M",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(FDVI, 0x01,
		"fdv%c%t%r", "%D,%N,#%I",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(TANTANI_LINK)

DEFINST(TAN, 0x00,
		"tan%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(TANI, 0x01,
		"tan%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(FRDFRDI_LINK)

DEFINST(FRD, 0x00,
		"frd%c%t%r", "%D,%N,%M",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(FRDI, 0x01,
		"frd%c%t%r", "%D,%N,#%I",
		FloatDIV, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(ASNASNI_LINK)

DEFINST(ASN, 0x00,
		"asn%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(ASNI, 0x01,
		"asn%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(POLPOLI_LINK)

DEFINST(POL, 0x00,
		"pol%c%t%r", "%D,%N,%M",
		FloatSQRT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(POLI, 0x01,
		"pol%c%t%r", "%D,%N,#%I",
		FloatSQRT, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(ACSACSI_LINK)

DEFINST(ACS, 0x00,
		"acs%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(ACSI, 0x01,
		"acs%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(ATNATNI_LINK)

DEFINST(ATN, 0x00,
		"atn%c%t%r", "%D,%N,%M",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(ATNI, 0x01,
		"atn%c%t%r", "%D,%N,#%I",
		FloatADD, F_FCOMP,
		DFPR(FD), DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(URDURDI_LINK)

DEFINST(FURD, 0x00,
		"urd%c%t%r", "%D,%M",
		FloatADD, F_FCOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(FURDI, 0x01,
		"urd%c%t%r", "%D,#%I",
		FloatADD, F_FCOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(NRMNRMI_LINK)

DEFINST(NRM, 0x00,
		"nrm%c%t%r", "%D,%M",
		FloatADD, F_FCOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(NRMI, 0x01,
		"nrm%c%t%r", "%D,#%I",
		FloatADD, F_FCOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

/* FP coprocessor register transfer (CPRT) */

CONNECT(CPRT_CDP_LINK)

DEFLINK(CDP_LINK, 0x00, "cdp_link", 4, 0x01)

DEFLINK(CPRT_LINK, 0x01, "cprt_link", 20, 0x0f)

CONNECT(CDP_LINK)

/* FIXME: Work more on this CDP instruction !!!! */

/* need to fix this instruction definition */

DEFINST(CDP, 0x00,
		"cdp%c", "%P, %p, c%d, c%n, c%w, {%g}",
		FloatADD, F_FCOMP,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(CPRT_LINK)

DEFINST(FLT, 0x00,
		"flt%c%t%r", "%N,%d",
		FloatADD, F_FCOMP,
		DFPR(FN), DNA, DNA, DCOND, DGPR(RD), DNA, DNA)

DEFINST(FIX, 0x01,
		"fix%c%r", "%d,%M",
		FloatADD, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DFPR(FM), DNA, DNA)

DEFINST(WFS, 0x02,
		"wfs%c", "%d",
		IntALU, F_ICOMP,
		DFPSR, DNA, DNA, DCOND, DGPR(RD), DNA, DNA)

DEFINST(RFS, 0x03,
		"rfs%c", "%d",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DFPSR, DNA, DNA)

DEFINST(WFC, 0x04,
		"wfc%c", "%d",
		IntALU, F_ICOMP,
		DFPSR, DNA, DNA, DCOND, DGPR(RD), DNA, DNA)

DEFINST(RFC, 0x05,
		"rfc%c", "%d",
		IntALU, F_ICOMP,
		DGPR(RD), DNA, DNA, DCOND, DFPSR, DNA, DNA)

CONNECT(CMF_LINK)

DEFLINK(CMFCMFI_LINK, 0x04, "cmfcmfi_link", 3, 0x01)

DEFLINK(CNFCNFI_LINK, 0x05, "cnfcnfi_link", 3, 0x01)

DEFLINK(CMFECMFEI_LINK, 0x06, "cmfecmfei_link", 3, 0x01)

DEFLINK(CNFECNFEI_LINK, 0x07, "cnfecnfei_link", 3, 0x01)

CONNECT(CMFCMFI_LINK)

DEFINST(CMF, 0x00,
		"cmf%c", "%N,%M",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(CMFI, 0x01,
		"cmf%c", "%N,#%I",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(CNFCNFI_LINK)

DEFINST(CNF, 0x00,
		"cnf%c", "%N,%M",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(CNFI, 0x01,
		"cnf%c", "%N,#%I",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(CMFECMFEI_LINK)

DEFINST(CMFE, 0x00,
		"cmfe%c", "%N,%M",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(CMFEI, 0x01,
		"cmfe%c", "%N,#%I",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(CNFECNFEI_LINK)

DEFINST(CNFE, 0x00,
		"cnfe%c", "%N,%M",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DFPR(FM), DNA)

DEFINST(CNFEI, 0x01,
		"cnfe%c", "%N,#%I",
		FloatADD, F_FCOMP,
		DPSR, DNA, DNA, DCOND, DFPR(FN), DNA, DNA)

CONNECT(CDXPOST_LINK)

DEFLINK(LDFSTFPOST_LINK, 0x01, "ldfstfpost_link", 20, 0x0f)

DEFLINK(LFMSFMPOST_LINK, 0x02, "lfmsfmpost_link", 20, 0x0b)

CONNECT(CDXPRE_LINK)

DEFLINK(LDFSTFPRE_LINK, 0x01, "ldfstfpre_link", 20, 0x0f)

DEFLINK(LFMSFMPRE_LINK, 0x02, "lfmsfmpre_link", 20, 0x0b)

CONNECT(LDFSTFPOST_LINK)

/* DEFLINK(STFSSTFD_LINK, 0x00, "stfsstfd_link", 15, 0x01) */

/* DEFLINK(LDFS_LLDFD_L_LINK, 0x01, "ldfs_lldfd_l_link", 15, 0x01) */

DEFLINK(STFS_WSTFD_W_LINK, 0x02, "stfs_wstfd_w_link", 15, 0x01)

DEFLINK(LDFS_WLLDFD_WL_LINK, 0x03, "ldfs_wlldfd_wl_link", 15, 0x01)

DEFLINK(STFE_WSTFP_W_LINK, 0x06, "stfe_wstfp_w_link", 15, 0x01)

DEFLINK(LDFE_WLLDFP_WL_LINK, 0x07, "ldfe_wlldfp_wl_link", 15, 0x01)

/* DEFLINK(STFS_USTFD_U_LINK, 0x08, "stfs_ustfd_u_link", 15, 0x01) */

/* DEFLINK(LDFS_ULLDFD_UL_LINK, 0x09, "ldfs_ulldfd_ul_link", 15, 0x01) */

DEFLINK(STFS_UWSTFD_UW_LINK, 0x0a, "stfs_uwstfd_uw_link", 15, 0x01)

DEFLINK(LDFS_UWLLDFD_UWL_LINK, 0x0b, "ldfs_uwlldfd_uwl_link", 15, 0x01)

DEFLINK(STFE_UWSTFP_UW_LINK, 0x0e, "stfe_uwstfp_uw_link", 15, 0x01)

DEFLINK(LDFE_UWLLDFP_UWL_LINK, 0x0f, "ldfe_uwlldfp_uwl_link", 15, 0x01)

CONNECT(STFS_WSTFD_W_LINK)

DEFINST(STFS_W, 0x00,
		"stf%cs", "%D,[%n],-#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFD_W, 0x01,

		"stf%cd", "%D,[%n],-#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDFS_WLLDFD_WL_LINK)

DEFINST(LDFS_WL, 0x00,
		"ldf%cs", "%D,[%n],-#%O",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFD_WL, 0x01,

		"ldf%cd", "%D,[%n],-#%O",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(STFE_WSTFP_W_LINK)

DEFINST(STFE_W, 0x00,
		"stf%ce", "%D,[%n],-#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFP_W, 0x01,
		"stf%cp", "%D,[%n],-#%O",
		WrPort, F_MEM | F_STORE | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFE_WLLDFP_WL_LINK)

DEFINST(LDFE_WL, 0x00,
		"ldf%ce", "%D,[%n],-#%O",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFP_WL, 0x01,
		"ldf%cp", "%D,[%n],-#%O",
		RdPort, F_MEM | F_LOAD | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(STFS_UWSTFD_UW_LINK)

DEFINST(STFS_UW, 0x00,
		"stf%cs", "%D,[%n],#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFD_UW, 0x01,
		"stf%cd", "%D,[%n],#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDFS_UWLLDFD_UWL_LINK)

DEFINST(LDFS_UWL, 0x00,
		"ldf%cs", "%D,[%n],#%O",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFD_UWL, 0x01,
		"ldf%cd", "%D,[%n],#%O",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(STFE_UWSTFP_UW_LINK)

DEFINST(STFE_UW, 0x00,
		"stf%ce", "%D,[%n],#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFP_UW, 0x01,
		"stf%cp", "%D,[%n],#%O",
		WrPort, F_MEM | F_STORE | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFE_UWLLDFP_UWL_LINK)

DEFINST(LDFE_UWL, 0x00,
		"ldf%ce", "%D,[%n],#%O",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFP_UWL, 0x01,
		"ldf%cp", "%D,[%n],#%O",
		RdPort, F_MEM | F_LOAD | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFSTFPRE_LINK)

DEFLINK(STFS_PSTFD_P_LINK, 0x00, "stfs_pstfd_p_link", 15, 0x01)

DEFLINK(LDFS_PLLDFD_PL_LINK, 0x01, "ldfs_plldfd_pl_link", 15, 0x01)

DEFLINK(STFS_PWSTFD_PW_LINK, 0x02, "stfs_pwstfd_pw_link", 15, 0x01)

DEFLINK(LDFS_PWLLDFD_PWL_LINK, 0x03, "ldfs_pwlldfd_pwl_link", 15, 0x01)

DEFLINK(STFE_PSTFP_P_LINK, 0x04, "stfe_pstfp_p_link", 15, 0x01)

DEFLINK(LDFE_PLLDFP_PL_LINK, 0x05, "ldfe_plldfp_pl_link", 15, 0x01)

DEFLINK(STFE_PWSTFP_PW_LINK, 0x06, "stfe_pwstfp_pw_link", 15, 0x01)

DEFLINK(LDFE_PWLLDFP_PWL_LINK, 0x07, "ldfe_pwlldfp_pwl_link", 15, 0x01)

DEFLINK(STFS_PUSTFD_PU_LINK, 0x08, "stfs_pustfd_pu_link", 15, 0x01)

DEFLINK(LDFS_PULLDFD_PUL_LINK, 0x09, "ldfs_pulldfd_pul_link", 15, 0x01)

DEFLINK(STFS_PUWSTFD_PUW_LINK, 0x0a, "stfs_puwstfd_puw_link", 15, 0x01)

DEFLINK(LDFS_PUWLLDFD_PUWL_LINK, 0x0b, "ldfs_puwlldfd_puwl_link", 15, 0x01)

DEFLINK(STFE_PUSTFP_PU_LINK, 0x0c, "stfe_pustfp_pu_link", 15, 0x01)

DEFLINK(LDFE_PULLDFP_PUL_LINK, 0x0d, "ldfe_pulldfp_pul_link", 15, 0x01)

DEFLINK(STFE_PUWSTFP_PUW_LINK, 0x0e, "stfe_puwstfp_puw_link", 15, 0x01)

DEFLINK(LDFE_PUWLLDFP_PUWL_LINK, 0x0f, "ldfe_puwlldfp_puwl_link", 15, 0x01)

CONNECT(STFS_PSTFD_P_LINK)

DEFINST(STFS_P, 0x00,
		"stf%cs", "%D,[%n,-#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFD_P, 0x01,
		"stf%cd", "%D,[%n,-#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDFS_PLLDFD_PL_LINK)

DEFINST(LDFS_PL, 0x00,
		"ldf%cs", "%D,[%n,-#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFD_PL, 0x01,
		"ldf%cd", "%D,[%n,-#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(STFS_PWSTFD_PW_LINK)

DEFINST(STFS_PW, 0x00,
		"stf%cs", "%D,[%n,-#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFD_PW, 0x01,
		"stf%cd", "%D,[%n,-#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDFS_PWLLDFD_PWL_LINK)

DEFINST(LDFS_PWL, 0x00,
		"ldf%cs", "%D,[%n,-#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFD_PWL, 0x01,
		"ldf%cd", "%D,[%n,-#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(STFE_PSTFP_P_LINK)

DEFINST(STFE_P, 0x00,
		"stf%ce", "%D,[%n,-#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFP_P, 0x01,
		"stf%cp", "%D,[%n,-#%O]",
		WrPort, F_MEM | F_STORE | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFE_PLLDFP_PL_LINK)

DEFINST(LDFE_PL, 0x00,
		"ldf%ce", "%D,[%n,-#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFP_PL, 0x01,
		"ldf%cp", "%D,[%n,-#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(STFE_PWSTFP_PW_LINK)

DEFINST(STFE_PW, 0x00,
		"stf%ce", "%D,[%n,-#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFP_PW, 0x01,
		"stf%cp", "%D,[%n,-#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFE_PWLLDFP_PWL_LINK)

DEFINST(LDFE_PWL, 0x00,
		"ldf%ce", "%D,[%n,-#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFP_PWL, 0x01,
		"ldf%cp", "%D,[%n,-#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(STFS_PUSTFD_PU_LINK)

DEFINST(STFS_PU, 0x00,
		"stf%cs", "%D,[%n,#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFD_PU, 0x01,
		"stf%cd", "%D,[%n,#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDFS_PULLDFD_PUL_LINK)

DEFINST(LDFS_PUL, 0x00,
		"ldf%cs", "%D,[%n,#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFD_PUL, 0x01,
		"ldf%cd", "%D,[%n,#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(STFS_PUWSTFD_PUW_LINK)

DEFINST(STFS_PUW, 0x00,
		"stf%cs", "%D,[%n,#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFD_PUW, 0x01,
		"stf%cd", "%D,[%n,#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

CONNECT(LDFS_PUWLLDFD_PUWL_LINK)

DEFINST(LDFS_PUWL, 0x00,
		"ldf%cs", "%D,[%n,#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFD_PUWL, 0x01,
		"ldf%cd", "%D,[%n,#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

CONNECT(STFE_PUSTFP_PU_LINK)

DEFINST(STFE_PU, 0x00,
		"stf%ce", "%D,[%n,#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFP_PU, 0x01,
		"stf%cp", "%D,[%n,#%O]",
		WrPort, F_MEM | F_STORE | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFE_PULLDFP_PUL_LINK)

DEFINST(LDFE_PUL, 0x00,
		"ldf%ce", "%D,[%n,#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFP_PUL, 0x01,
		"ldf%cp", "%D,[%n,#%O]",
		RdPort, F_MEM | F_LOAD | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(STFE_PUWSTFP_PUW_LINK)

DEFINST(STFE_PUW, 0x00,
		"stf%ce", "%D,[%n,#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DGPR(RN), DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(RN), DNA)

DEFINST(STFP_PUW, 0x01,
		"stf%cp", "%D,[%n,#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LDFE_PUWLLDFP_PUWL_LINK)

DEFINST(LDFE_PUWL, 0x00,
		"ldf%ce", "%D,[%n,#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP | F_CISC,
		DFPR(FD), DGPR(RN), DNA, DNA, /**/ DCOND, DGPR(RN), DNA)

DEFINST(LDFP_PUWL, 0x01,
		"ldf%cp", "%D,[%n,#%O]!",
		RdPort, F_MEM | F_LOAD | F_DISP /*|F_CISC*/,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LFMSFMPOST_LINK)

/* SFM, 0x00 */

/* LFM, 0x01 */

DEFINST(SFM_W, 0x02,
		"sfm%c", "%D,%C,[%n],-#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(LFM_WL, 0x03,
		"lfm%c", "%D,%C,[%n],-#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(SFM_UW, 0x0a,
		"sfm%c", "%D,%C,[%n],#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(LFM_UWL, 0x0b,
		"lfm%c", "%D,%C,[%n],#%O",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

CONNECT(LFMSFMPRE_LINK)

DEFINST(SFM_P, 0x00,
		"sfm%c", "%D,%C,[%n,-#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(LFM_PL, 0x01,
		"lfm%c", "%D,%C,[%n,-#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(SFM_PW, 0x02,
		"sfm%c", "%D,%C,[%n,-#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(LFM_PWL, 0x03,
		"lfm%c", "%D,%C,[%n,-#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(SFM_PU, 0x08,
		"sfm%c", "%D,%C,[%n,#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(LFM_PUL, 0x09,
		"lfm%c", "%D,%C,[%n,#%O]",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(SFM_PUW, 0x0a,
		"sfm%c", "%D,%C,[%n,#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

DEFINST(LFM_PUWL, 0x0b,
		"lfm%c", "%D,%C,[%n,#%O]!",
		WrPort, F_MEM | F_STORE | F_DISP | F_CISC,
		DNA, DNA, DNA, DCOND, DNA, DNA, DNA)

/*
 * UOP definitions
 */

/* address generation UOPs */

DEFUOP(AGEN,
	   "agen%c", "%v,%u,-%m",
	   IntALU, F_ICOMP | F_AGEN,
	   DGPR(URD), DNA, DNA, DCONDSH, DGPR(URN), DGPR(RM), DNA)

DEFUOP(AGEN_U,
	   "agen%c", "%v,%u,%m",
	   IntALU, F_ICOMP | F_AGEN,
	   DGPR(URD), DNA, DNA, DCONDSH, DGPR(URN), DGPR(RM), DNA)

DEFUOP(AGENI,
	   "agen%c", "%v,%u,-%o",
	   IntALU, F_ICOMP | F_AGEN,
	   DGPR(URD), DNA, DNA, DCOND, DGPR(URN), DNA, DNA)

DEFUOP(AGENI_U,
	   "agen%c", "%v,%u,%o",
	   IntALU, F_ICOMP | F_AGEN,
	   DGPR(URD), DNA, DNA, DCOND, DGPR(URN), DNA, DNA)

/* load/store primitives */

DEFUOP(STP_B,
	   "stp%cb", "%d,[%u]",
	   WrPort, F_MEM | F_STORE | F_DISP,
	   DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_B,
	   "ldp%cb", "%d,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_SB,
	   "ldp%csb", "%d,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(STP_H,
	   "stp%ch", "%d,[%u]",
	   WrPort, F_MEM | F_STORE | F_DISP,
	   DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_H,
	   "ldp%ch", "%d,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_SH,
	   "ldp%csh", "%d,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(STP_W,
	   "stp%c", "%d,[%u]",
	   WrPort, F_MEM | F_STORE | F_DISP,
	   DNA, DNA, DNA, DGPR(RD), /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_W,
	   "ldp%c", "%d,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DGPR(RD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(STP_S,
	   "stp%cs", "%D,[%u]",
	   WrPort, F_MEM | F_STORE | F_DISP,
	   DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_S,
	   "ldp%cs", "%D,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(STP_D,
	   "stp%cd", "%D,[%u]",
	   WrPort, F_MEM | F_STORE | F_DISP,
	   DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_D,
	   "ldp%cd", "%D,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

DEFUOP(STP_E,
	   "stp%ce", "%D,[%u]",
	   WrPort, F_MEM | F_STORE | F_DISP,
	   DNA, DNA, DNA, DFPR(FD), /**/ DCOND, DGPR(URN), DNA)

DEFUOP(LDP_E,
	   "ldp%ce", "%D,[%u]",
	   WrPort, F_MEM | F_LOAD | F_DISP,
	   DFPR(FD), DNA, DNA, DNA, /**/ DCOND, DGPR(URN), DNA)

#undef DEFINST
#undef DEFUOP
#undef DEFLINK
#undef CONNECT
